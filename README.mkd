# Redis HyperLogLog

Calculate/estimate cardinality on redis server by HyperLogLog algorithm.

## Usage of Java (sample) version

### Preparation

    $ cat src/main/lua/hll_add.lua | redis-cli -x script load
    "2eb7a83ccc6847dec2eeaaa46203b1564a9ae73e"
    $ cat src/main/lua/hll_count.lua | redis-cli -x script load
    "c69a161cc39eb38a6483b9fab82f00565b482064"
    $ gradle build

### Samples

```java
// jedis is an instance of redis.clients.jedis.Jedis.

Adapter adapter = new Adapter(jedis, 4);

// Setup 4 counters: set1, set2, set3, set4
for (int i = 1; i <= 50; ++i) {
  adapter.add("set1", "item" + i);
}
for (int i = 51; i <= 100; ++i) {
  adapter.add("set2", "item" + i);
}
for (int i = 1; i <= 100; i += 2) {
  adapter.add("set3", "item" + i);
}
for (int i = 2; i <= 100; i += 2) {
  adapter.add("set4", "item" + i);
}

System.out.println(adapter.count("set1"));
System.out.println(adapter.count("set2"));
System.out.println(adapter.count("set3"));
System.out.println(adapter.count("set4"));
System.out.println(adapter.count("set1", "set2"));
System.out.println(adapter.count("set3", "set4"));
System.out.println(adapter.count("set1", "set3"));
System.out.println(adapter.count("set1", "set4"));
System.out.println(adapter.count("set2", "set3"));
System.out.println(adapter.count("set2", "set4"));
```

It will show:

```
47
64
46
33
108
108
71
70
106
78
```

This is equal to below lua1/ sample.

### Contribute

*   [MurmurHash3](https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java)

## Practical usage of Java version.

### Redisクライアント側での準備

1.  以下のファイルを自分のプロジェクトにコピーします

    *   src/main/java/net/kaoriya/qb/redis_hll/Adapter.java
    *   src/main/java/net/kaoriya/qb/redis_hll/MurmurHash3.java

2.  Jedis オブジェクトを取得し Adapter を作成します。

    ```java
    import net.kaoriya.qb.redis_hll.Adapter;
    import redis.clients.jedis.Jedis;
    import redis.clients.jedis.JedisPool;
    import redis.clients.jedis.JedisPoolConfig;

    JedisPool pool = new JedisPool(new JedisPoolConfig(), "127.0.0.1");
    Jedis jedis = pool.getResource();

    Adapter adapter = new Adapter(jedis);
    // もしくは以下のようにカウンターのサイズ(2^n)を指定してください。
    // 省略された場合は Adapter.DEFAULT_BITS = 9 を使用します。
    // Adapter adapter = new Adapter(jedis, 4);
    ```

3.  Adapter#add でカウンターを更新します。

    ```java
    adapter.add("{カウンター名1}", "カーディナリティの対象文字列");
    ```

    add メソッドにはいくつかのバリエーションがあります。

    *   `add(String, byte[])` - 文字列の代わりにバイト配列を使用
    *   `add(String, long)` - 自分でハッシュ値を計算する場合

4.  Adapter#count でカウントを取得します。

    ```java
    long n = adapter.count("{カウンター名1}");
    ```

    複数のカウンターを指定すると合成したカウント(ユニオン)を取得できます。

    ```java
    long n2 = adapter.count("{カウンター名1}", "{カウンター名2}");
    ```

### Redisサーバ側での準備

1.  以下のファイルをRedisサーバにアクセスできる場所へコピーします

    *   src/main/lua/hll_add.lua
    *   src/main/lua/hll_count.lua

2.  両スクリプトをサーバに読み込ませます。

    $ cat hll_add.lua | redis-cli -x script load
    "2eb7a83ccc6847dec2eeaaa46203b1564a9ae73e"
    $ cat hll_count.lua | redis-cli -x script load
    "c69a161cc39eb38a6483b9fab82f00565b482064"

3.  クライアントプログラムからアクセスします。

### 注意事項

`hll_add.lua`, `hll_count.lua` を更新した場合は `Adapter#SHA1_ADD` と
`Adapter#SHA1_COUNT` を更新してください。

## Usage of lua1/ sample

    $ cd lua1
    $ gcc mmh3.c
    $ sh ./add.sh

    $ redis-cli --eval hll_count.lua set1 , 4
    (integer) 47
    $ redis-cli --eval hll_count.lua set2 , 4
    (integer) 64
    $ redis-cli --eval hll_count.lua set3 , 4
    (integer) 46
    $ redis-cli --eval hll_count.lua set4 , 4
    (integer) 33

    $ redis-cli --eval hll_count.lua set1 set2 , 4
    (integer) 108
    $ redis-cli --eval hll_count.lua set3 set4 , 4
    (integer) 108
    $ redis-cli --eval hll_count.lua set1 set3 , 4
    (integer) 71
    $ redis-cli --eval hll_count.lua set1 set4 , 4
    (integer) 70
    $ redis-cli --eval hll_count.lua set2 set3 , 4
    (integer) 106
    $ redis-cli --eval hll_count.lua set2 set4 , 4
    (integer) 78

`add.sh` script add 4 counters like this:

*   `set1` - includes from "item1" to "item50" step by 1 (50 items).
*   `set2` - includes from "item51" to "item100" step by 1 (50 items).
*   `set3` - includes from "item1" to "item99" step by 2 (50 items).
*   `set4` - includes from "item2" to "item100" step by 2 (50 items).

So expected result of union `set1` and `set2` is 100.  And others are:

*   `set3` and `set4` - 100
*   `set1` and `set3` - 75
*   `set1` and `set4` - 75
*   `set2` and `set3` - 75
*   `set2` and `set4` - 75

Above results are almost as expected (expect for `set2` and `set3` pair).

On these tests, we use 4 as `bits`, it means size of counter is only 16 (2^4)
bytes.  To check actual data for counters:

    $ redis-cli GET set1
    $ redis-cli GET set2
    $ redis-cli GET set3
    $ redis-cli GET set4
