# Redis HyperLogLog

Calculate/estimate cardinality on redis server by HyperLogLog algorithm.

## Usage or lua1/ sample

    $ cd lua1
    $ gcc mmh3.c
    $ sh ./add.sh

    $ redis-cli --eval hll_count.lua set1 , 4
    (integer) 47
    $ redis-cli --eval hll_count.lua set2 , 4
    (integer) 64
    $ redis-cli --eval hll_count.lua set3 , 4
    (integer) 46
    $ redis-cli --eval hll_count.lua set4 , 4
    (integer) 33

    $ redis-cli --eval hll_count.lua set1 set2 , 4
    (integer) 108
    $ redis-cli --eval hll_count.lua set3 set4 , 4
    (integer) 108
    $ redis-cli --eval hll_count.lua set1 set3 , 4
    (integer) 71
    $ redis-cli --eval hll_count.lua set1 set4 , 4
    (integer) 70
    $ redis-cli --eval hll_count.lua set2 set3 , 4
    (integer) 106
    $ redis-cli --eval hll_count.lua set2 set4 , 4
    (integer) 78

`add.sh` script add 4 counters like this:

*   `set1` - includes from "item1" to "item50" step by 1 (50 items).
*   `set2` - includes from "item51" to "item100" step by 1 (50 items).
*   `set3` - includes from "item1" to "item99" step by 2 (50 items).
*   `set4` - includes from "item2" to "item100" step by 2 (50 items).

So expected result of union `set1` and `set2` is 100.  And others are:

*   `set3` and `set4` - 100
*   `set1` and `set3` - 75
*   `set1` and `set4` - 75
*   `set2` and `set3` - 75
*   `set2` and `set4` - 75

Above results are almost as expected (expect for `set2` and `set3` pair).

On these tests, we use 4 as `bits`, it means size of counter is only 16 (2^4)
bytes.  To check actual data for counters:

    $ redis-cli GET set1
    $ redis-cli GET set2
    $ redis-cli GET set3
    $ redis-cli GET set4
